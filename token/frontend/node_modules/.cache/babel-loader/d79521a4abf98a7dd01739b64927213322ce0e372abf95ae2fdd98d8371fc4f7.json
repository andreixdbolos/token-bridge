{"ast":null,"code":"import { array, boolean, define, is, literal, number, object, record, string, tuple, union } from \"superstruct\";\nconst SuiMoveFunctionArgType = union([string(), object({\n  Object: string()\n})]);\nconst SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nconst SuiMoveModuleId = object({\n  address: string(),\n  name: string()\n});\nconst SuiMoveVisibility = union([literal(\"Private\"), literal(\"Public\"), literal(\"Friend\")]);\nconst SuiMoveAbilitySet = object({\n  abilities: array(string())\n});\nconst SuiMoveStructTypeParameter = object({\n  constraints: SuiMoveAbilitySet,\n  isPhantom: boolean()\n});\nconst SuiMoveNormalizedTypeParameterType = object({\n  TypeParameter: number()\n});\nconst MoveCallMetric = tuple([object({\n  module: string(),\n  package: string(),\n  function: string()\n}), string()]);\nconst MoveCallMetrics = object({\n  rank3Days: array(MoveCallMetric),\n  rank7Days: array(MoveCallMetric),\n  rank30Days: array(MoveCallMetric)\n});\nfunction isSuiMoveNormalizedType(value) {\n  if (!value) return false;\n  if (typeof value === \"string\") return true;\n  if (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n  if (isSuiMoveNormalizedStructType(value)) return true;\n  if (typeof value !== \"object\") return false;\n  const valueProperties = value;\n  if (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n  if (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n  if (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n  return false;\n}\nconst SuiMoveNormalizedType = define(\"SuiMoveNormalizedType\", isSuiMoveNormalizedType);\nfunction isSuiMoveNormalizedStructType(value) {\n  if (!value || typeof value !== \"object\") return false;\n  const valueProperties = value;\n  if (!valueProperties.Struct || typeof valueProperties.Struct !== \"object\") return false;\n  const structProperties = valueProperties.Struct;\n  if (typeof structProperties.address !== \"string\" || typeof structProperties.module !== \"string\" || typeof structProperties.name !== \"string\" || !Array.isArray(structProperties.typeArguments) || !structProperties.typeArguments.every(value2 => isSuiMoveNormalizedType(value2))) {\n    return false;\n  }\n  return true;\n}\nconst SuiMoveNormalizedStructType = define(\"SuiMoveNormalizedStructType\", isSuiMoveNormalizedStructType);\nconst SuiMoveNormalizedFunction = object({\n  visibility: SuiMoveVisibility,\n  isEntry: boolean(),\n  typeParameters: array(SuiMoveAbilitySet),\n  parameters: array(SuiMoveNormalizedType),\n  return: array(SuiMoveNormalizedType)\n});\nconst SuiMoveNormalizedField = object({\n  name: string(),\n  type: SuiMoveNormalizedType\n});\nconst SuiMoveNormalizedStruct = object({\n  abilities: SuiMoveAbilitySet,\n  typeParameters: array(SuiMoveStructTypeParameter),\n  fields: array(SuiMoveNormalizedField)\n});\nconst SuiMoveNormalizedModule = object({\n  fileFormatVersion: number(),\n  address: string(),\n  name: string(),\n  friends: array(SuiMoveModuleId),\n  structs: record(string(), SuiMoveNormalizedStruct),\n  exposedFunctions: record(string(), SuiMoveNormalizedFunction)\n});\nconst SuiMoveNormalizedModules = record(string(), SuiMoveNormalizedModule);\nfunction extractMutableReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"MutableReference\" in normalizedType ? normalizedType.MutableReference : void 0;\n}\nfunction extractReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"Reference\" in normalizedType ? normalizedType.Reference : void 0;\n}\nfunction extractStructTag(normalizedType) {\n  if (typeof normalizedType === \"object\" && \"Struct\" in normalizedType) {\n    return normalizedType;\n  }\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n  if (typeof ref === \"object\" && \"Struct\" in ref) {\n    return ref;\n  }\n  if (typeof mutRef === \"object\" && \"Struct\" in mutRef) {\n    return mutRef;\n  }\n  return void 0;\n}\nexport { MoveCallMetric, MoveCallMetrics, SuiMoveAbilitySet, SuiMoveFunctionArgType, SuiMoveFunctionArgTypes, SuiMoveModuleId, SuiMoveNormalizedField, SuiMoveNormalizedFunction, SuiMoveNormalizedModule, SuiMoveNormalizedModules, SuiMoveNormalizedStruct, SuiMoveNormalizedStructType, SuiMoveNormalizedType, SuiMoveNormalizedTypeParameterType, SuiMoveStructTypeParameter, SuiMoveVisibility, extractMutableReference, extractReference, extractStructTag };","map":{"version":3,"names":["array","boolean","define","is","literal","number","object","record","string","tuple","union","SuiMoveFunctionArgType","Object","SuiMoveFunctionArgTypes","SuiMoveModuleId","address","name","SuiMoveVisibility","SuiMoveAbilitySet","abilities","SuiMoveStructTypeParameter","constraints","isPhantom","SuiMoveNormalizedTypeParameterType","TypeParameter","MoveCallMetric","module","package","function","MoveCallMetrics","rank3Days","rank7Days","rank30Days","isSuiMoveNormalizedType","value","isSuiMoveNormalizedStructType","valueProperties","Reference","SuiMoveNormalizedType","MutableReference","Vector","Struct","structProperties","Array","isArray","typeArguments","every","value2","SuiMoveNormalizedStructType","SuiMoveNormalizedFunction","visibility","isEntry","typeParameters","parameters","return","SuiMoveNormalizedField","type","SuiMoveNormalizedStruct","fields","SuiMoveNormalizedModule","fileFormatVersion","friends","structs","exposedFunctions","SuiMoveNormalizedModules","extractMutableReference","normalizedType","extractReference","extractStructTag","ref","mutRef"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/types/normalized.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tboolean,\n\tdefine,\n\tis,\n\tliteral,\n\tnumber,\n\tobject,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n} from 'superstruct';\n\nexport type SuiMoveFunctionArgTypesResponse = Infer<typeof SuiMoveFunctionArgType>[];\n\nexport const SuiMoveFunctionArgType = union([string(), object({ Object: string() })]);\n\nexport const SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nexport type SuiMoveFunctionArgTypes = Infer<typeof SuiMoveFunctionArgTypes>;\n\nexport const SuiMoveModuleId = object({\n\taddress: string(),\n\tname: string(),\n});\nexport type SuiMoveModuleId = Infer<typeof SuiMoveModuleId>;\n\nexport const SuiMoveVisibility = union([literal('Private'), literal('Public'), literal('Friend')]);\nexport type SuiMoveVisibility = Infer<typeof SuiMoveVisibility>;\n\nexport const SuiMoveAbilitySet = object({\n\tabilities: array(string()),\n});\nexport type SuiMoveAbilitySet = Infer<typeof SuiMoveAbilitySet>;\n\nexport const SuiMoveStructTypeParameter = object({\n\tconstraints: SuiMoveAbilitySet,\n\tisPhantom: boolean(),\n});\nexport type SuiMoveStructTypeParameter = Infer<typeof SuiMoveStructTypeParameter>;\n\nexport const SuiMoveNormalizedTypeParameterType = object({\n\tTypeParameter: number(),\n});\nexport type SuiMoveNormalizedTypeParameterType = Infer<typeof SuiMoveNormalizedTypeParameterType>;\n\nexport type SuiMoveNormalizedType =\n\t| string\n\t| SuiMoveNormalizedTypeParameterType\n\t| { Reference: SuiMoveNormalizedType }\n\t| { MutableReference: SuiMoveNormalizedType }\n\t| { Vector: SuiMoveNormalizedType }\n\t| SuiMoveNormalizedStructType;\n\nexport const MoveCallMetric = tuple([\n\tobject({\n\t\tmodule: string(),\n\t\tpackage: string(),\n\t\tfunction: string(),\n\t}),\n\tstring(),\n]);\n\nexport type MoveCallMetric = Infer<typeof MoveCallMetric>;\n\nexport const MoveCallMetrics = object({\n\trank3Days: array(MoveCallMetric),\n\trank7Days: array(MoveCallMetric),\n\trank30Days: array(MoveCallMetric),\n});\n\nexport type MoveCallMetrics = Infer<typeof MoveCallMetrics>;\n\nfunction isSuiMoveNormalizedType(value: unknown): value is SuiMoveNormalizedType {\n\tif (!value) return false;\n\tif (typeof value === 'string') return true;\n\tif (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n\tif (isSuiMoveNormalizedStructType(value)) return true;\n\tif (typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n\treturn false;\n}\n\nexport const SuiMoveNormalizedType = define<SuiMoveNormalizedType>(\n\t'SuiMoveNormalizedType',\n\tisSuiMoveNormalizedType,\n);\n\nexport type SuiMoveNormalizedStructType = {\n\tStruct: {\n\t\taddress: string;\n\t\tmodule: string;\n\t\tname: string;\n\t\ttypeArguments: SuiMoveNormalizedType[];\n\t};\n};\n\nfunction isSuiMoveNormalizedStructType(value: unknown): value is SuiMoveNormalizedStructType {\n\tif (!value || typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (!valueProperties.Struct || typeof valueProperties.Struct !== 'object') return false;\n\n\tconst structProperties = valueProperties.Struct as Record<string, unknown>;\n\tif (\n\t\ttypeof structProperties.address !== 'string' ||\n\t\ttypeof structProperties.module !== 'string' ||\n\t\ttypeof structProperties.name !== 'string' ||\n\t\t!Array.isArray(structProperties.typeArguments) ||\n\t\t!structProperties.typeArguments.every((value) => isSuiMoveNormalizedType(value))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const SuiMoveNormalizedStructType = define<SuiMoveNormalizedStructType>(\n\t'SuiMoveNormalizedStructType',\n\tisSuiMoveNormalizedStructType,\n);\n\nexport const SuiMoveNormalizedFunction = object({\n\tvisibility: SuiMoveVisibility,\n\tisEntry: boolean(),\n\ttypeParameters: array(SuiMoveAbilitySet),\n\tparameters: array(SuiMoveNormalizedType),\n\treturn: array(SuiMoveNormalizedType),\n});\nexport type SuiMoveNormalizedFunction = Infer<typeof SuiMoveNormalizedFunction>;\n\nexport const SuiMoveNormalizedField = object({\n\tname: string(),\n\ttype: SuiMoveNormalizedType,\n});\nexport type SuiMoveNormalizedField = Infer<typeof SuiMoveNormalizedField>;\n\nexport const SuiMoveNormalizedStruct = object({\n\tabilities: SuiMoveAbilitySet,\n\ttypeParameters: array(SuiMoveStructTypeParameter),\n\tfields: array(SuiMoveNormalizedField),\n});\nexport type SuiMoveNormalizedStruct = Infer<typeof SuiMoveNormalizedStruct>;\n\nexport const SuiMoveNormalizedModule = object({\n\tfileFormatVersion: number(),\n\taddress: string(),\n\tname: string(),\n\tfriends: array(SuiMoveModuleId),\n\tstructs: record(string(), SuiMoveNormalizedStruct),\n\texposedFunctions: record(string(), SuiMoveNormalizedFunction),\n});\nexport type SuiMoveNormalizedModule = Infer<typeof SuiMoveNormalizedModule>;\n\nexport const SuiMoveNormalizedModules = record(string(), SuiMoveNormalizedModule);\nexport type SuiMoveNormalizedModules = Infer<typeof SuiMoveNormalizedModules>;\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedStructType | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}