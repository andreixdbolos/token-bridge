{"ast":null,"code":"var AppId = /* @__PURE__ */(AppId2 => {\n  AppId2[AppId2[\"Sui\"] = 0] = \"Sui\";\n  return AppId2;\n})(AppId || {});\nvar IntentVersion = /* @__PURE__ */(IntentVersion2 => {\n  IntentVersion2[IntentVersion2[\"V0\"] = 0] = \"V0\";\n  return IntentVersion2;\n})(IntentVersion || {});\nvar IntentScope = /* @__PURE__ */(IntentScope2 => {\n  IntentScope2[IntentScope2[\"TransactionData\"] = 0] = \"TransactionData\";\n  IntentScope2[IntentScope2[\"TransactionEffects\"] = 1] = \"TransactionEffects\";\n  IntentScope2[IntentScope2[\"CheckpointSummary\"] = 2] = \"CheckpointSummary\";\n  IntentScope2[IntentScope2[\"PersonalMessage\"] = 3] = \"PersonalMessage\";\n  return IntentScope2;\n})(IntentScope || {});\nfunction intentWithScope(scope) {\n  return [scope, 0 /* V0 */, 0 /* Sui */];\n}\nfunction messageWithIntent(scope, message) {\n  const intent = intentWithScope(scope);\n  const intentMessage = new Uint8Array(intent.length + message.length);\n  intentMessage.set(intent);\n  intentMessage.set(message, intent.length);\n  return intentMessage;\n}\nexport { AppId, IntentScope, IntentVersion, messageWithIntent };","map":{"version":3,"names":["AppId","AppId2","IntentVersion","IntentVersion2","IntentScope","IntentScope2","intentWithScope","scope","messageWithIntent","message","intent","intentMessage","Uint8Array","length","set"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/cryptography/intent.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// See: sui/crates/sui-types/src/intent.rs\nexport enum AppId {\n\tSui = 0,\n}\n\nexport enum IntentVersion {\n\tV0 = 0,\n}\n\nexport enum IntentScope {\n\tTransactionData = 0,\n\tTransactionEffects = 1,\n\tCheckpointSummary = 2,\n\tPersonalMessage = 3,\n}\n\nexport type Intent = [IntentScope, IntentVersion, AppId];\n\nfunction intentWithScope(scope: IntentScope): Intent {\n\treturn [scope, IntentVersion.V0, AppId.Sui];\n}\n\n/**\n * Inserts a domain separator for a message that is being signed\n */\nexport function messageWithIntent(scope: IntentScope, message: Uint8Array) {\n\tconst intent = intentWithScope(scope);\n\tconst intentMessage = new Uint8Array(intent.length + message.length);\n\tintentMessage.set(intent);\n\tintentMessage.set(message, intent.length);\n\treturn intentMessage;\n}\n"],"mappings":"AAIO,IAAKA,KAAA,GAAL,gBAAKC,MAAA,IAAL;EACNA,MAAA,CAAAA,MAAA,UAAM,KAAN;EADW,OAAAA,MAAA;AAAA,GAAAD,KAAA;AAIL,IAAKE,aAAA,GAAL,gBAAKC,cAAA,IAAL;EACNA,cAAA,CAAAA,cAAA,SAAK,KAAL;EADW,OAAAA,cAAA;AAAA,GAAAD,aAAA;AAIL,IAAKE,WAAA,GAAL,gBAAKC,YAAA,IAAL;EACNA,YAAA,CAAAA,YAAA,sBAAkB,KAAlB;EACAA,YAAA,CAAAA,YAAA,yBAAqB,KAArB;EACAA,YAAA,CAAAA,YAAA,wBAAoB,KAApB;EACAA,YAAA,CAAAA,YAAA,sBAAkB,KAAlB;EAJW,OAAAA,YAAA;AAAA,GAAAD,WAAA;AASZ,SAASE,gBAAgBC,KAAA,EAA4B;EACpD,OAAO,CAACA,KAAA,EAAO,YAAkB,YAAS;AAC3C;AAKO,SAASC,kBAAkBD,KAAA,EAAoBE,OAAA,EAAqB;EAC1E,MAAMC,MAAA,GAASJ,eAAA,CAAgBC,KAAK;EACpC,MAAMI,aAAA,GAAgB,IAAIC,UAAA,CAAWF,MAAA,CAAOG,MAAA,GAASJ,OAAA,CAAQI,MAAM;EACnEF,aAAA,CAAcG,GAAA,CAAIJ,MAAM;EACxBC,aAAA,CAAcG,GAAA,CAAIL,OAAA,EAASC,MAAA,CAAOG,MAAM;EACxC,OAAOF,aAAA;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}