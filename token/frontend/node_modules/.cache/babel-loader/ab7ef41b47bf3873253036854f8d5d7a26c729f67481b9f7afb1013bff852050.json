{"ast":null,"code":"import { boolean, define, literal, nullable, object, record, string, union } from \"superstruct\";\nconst ObjectOwner = union([object({\n  AddressOwner: string()\n}), object({\n  ObjectOwner: string()\n}), object({\n  Shared: object({\n    initial_shared_version: nullable(string())\n  })\n}), literal(\"Immutable\")]);\nconst SuiJsonValue = define(\"SuiJsonValue\", () => true);\nconst ProtocolConfigValue = union([object({\n  u32: string()\n}), object({\n  u64: string()\n}), object({\n  f64: string()\n})]);\nconst ProtocolConfig = object({\n  attributes: record(string(), nullable(ProtocolConfigValue)),\n  featureFlags: record(string(), boolean()),\n  maxSupportedProtocolVersion: string(),\n  minSupportedProtocolVersion: string(),\n  protocolVersion: string()\n});\nexport { ObjectOwner, ProtocolConfig, SuiJsonValue };","map":{"version":3,"names":["boolean","define","literal","nullable","object","record","string","union","ObjectOwner","AddressOwner","Shared","initial_shared_version","SuiJsonValue","ProtocolConfigValue","u32","u64","f64","ProtocolConfig","attributes","featureFlags","maxSupportedProtocolVersion","minSupportedProtocolVersion","protocolVersion"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/types/common.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { boolean, define, literal, nullable, object, record, string, union } from 'superstruct';\n\nimport type { CallArg } from '../bcs/index.js';\n\nexport const ObjectOwner = union([\n\tobject({\n\t\tAddressOwner: string(),\n\t}),\n\tobject({\n\t\tObjectOwner: string(),\n\t}),\n\tobject({\n\t\tShared: object({\n\t\t\tinitial_shared_version: nullable(string()),\n\t\t}),\n\t}),\n\tliteral('Immutable'),\n]);\nexport type ObjectOwner = Infer<typeof ObjectOwner>;\n\nexport type SuiJsonValue = boolean | number | string | CallArg | Array<SuiJsonValue>;\nexport const SuiJsonValue = define<SuiJsonValue>('SuiJsonValue', () => true);\n\nconst ProtocolConfigValue = union([\n\tobject({ u32: string() }),\n\tobject({ u64: string() }),\n\tobject({ f64: string() }),\n]);\ntype ProtocolConfigValue = Infer<typeof ProtocolConfigValue>;\n\nexport const ProtocolConfig = object({\n\tattributes: record(string(), nullable(ProtocolConfigValue)),\n\tfeatureFlags: record(string(), boolean()),\n\tmaxSupportedProtocolVersion: string(),\n\tminSupportedProtocolVersion: string(),\n\tprotocolVersion: string(),\n});\nexport type ProtocolConfig = Infer<typeof ProtocolConfig>;\n"],"mappings":"AAIA,SAASA,OAAA,EAASC,MAAA,EAAQC,OAAA,EAASC,QAAA,EAAUC,MAAA,EAAQC,MAAA,EAAQC,MAAA,EAAQC,KAAA,QAAa;AAI3E,MAAMC,WAAA,GAAcD,KAAA,CAAM,CAChCH,MAAA,CAAO;EACNK,YAAA,EAAcH,MAAA,CAAO;AACtB,CAAC,GACDF,MAAA,CAAO;EACNI,WAAA,EAAaF,MAAA,CAAO;AACrB,CAAC,GACDF,MAAA,CAAO;EACNM,MAAA,EAAQN,MAAA,CAAO;IACdO,sBAAA,EAAwBR,QAAA,CAASG,MAAA,CAAO,CAAC;EAC1C,CAAC;AACF,CAAC,GACDJ,OAAA,CAAQ,WAAW,EACnB;AAIM,MAAMU,YAAA,GAAeX,MAAA,CAAqB,gBAAgB,MAAM,IAAI;AAE3E,MAAMY,mBAAA,GAAsBN,KAAA,CAAM,CACjCH,MAAA,CAAO;EAAEU,GAAA,EAAKR,MAAA,CAAO;AAAE,CAAC,GACxBF,MAAA,CAAO;EAAEW,GAAA,EAAKT,MAAA,CAAO;AAAE,CAAC,GACxBF,MAAA,CAAO;EAAEY,GAAA,EAAKV,MAAA,CAAO;AAAE,CAAC,EACxB;AAGM,MAAMW,cAAA,GAAiBb,MAAA,CAAO;EACpCc,UAAA,EAAYb,MAAA,CAAOC,MAAA,CAAO,GAAGH,QAAA,CAASU,mBAAmB,CAAC;EAC1DM,YAAA,EAAcd,MAAA,CAAOC,MAAA,CAAO,GAAGN,OAAA,CAAQ,CAAC;EACxCoB,2BAAA,EAA6Bd,MAAA,CAAO;EACpCe,2BAAA,EAA6Bf,MAAA,CAAO;EACpCgB,eAAA,EAAiBhB,MAAA,CAAO;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}