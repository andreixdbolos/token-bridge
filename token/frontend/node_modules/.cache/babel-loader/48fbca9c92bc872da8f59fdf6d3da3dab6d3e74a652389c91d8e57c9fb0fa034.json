{"ast":null,"code":"import { blake2b } from \"@noble/hashes/blake2b\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../cryptography/signature-scheme.js\";\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from \"../utils/index.js\";\nimport { toBigEndianBytes } from \"./utils.js\";\nfunction computeZkLoginAddressFromSeed(addressSeed, iss) {\n  const addressSeedBytesBigEndian = toBigEndianBytes(addressSeed, 32);\n  if (iss === \"accounts.google.com\") {\n    iss = \"https://accounts.google.com\";\n  }\n  const addressParamBytes = new TextEncoder().encode(iss);\n  const tmp = new Uint8Array(2 + addressSeedBytesBigEndian.length + addressParamBytes.length);\n  tmp.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n  tmp.set([addressParamBytes.length], 1);\n  tmp.set(addressParamBytes, 2);\n  tmp.set(addressSeedBytesBigEndian, 2 + addressParamBytes.length);\n  return normalizeSuiAddress(bytesToHex(blake2b(tmp, {\n    dkLen: 32\n  })).slice(0, SUI_ADDRESS_LENGTH * 2));\n}\nexport { computeZkLoginAddressFromSeed };","map":{"version":3,"names":["blake2b","bytesToHex","SIGNATURE_SCHEME_TO_FLAG","normalizeSuiAddress","SUI_ADDRESS_LENGTH","toBigEndianBytes","computeZkLoginAddressFromSeed","addressSeed","iss","addressSeedBytesBigEndian","addressParamBytes","TextEncoder","encode","tmp","Uint8Array","length","set","ZkLogin","dkLen","slice"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/zklogin/address.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../cryptography/signature-scheme.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/index.js';\nimport { toBigEndianBytes } from './utils.js';\n\nexport function computeZkLoginAddressFromSeed(addressSeed: bigint, iss: string) {\n\tconst addressSeedBytesBigEndian = toBigEndianBytes(addressSeed, 32);\n\tif (iss === 'accounts.google.com') {\n\t\tiss = 'https://accounts.google.com';\n\t}\n\tconst addressParamBytes = new TextEncoder().encode(iss);\n\tconst tmp = new Uint8Array(2 + addressSeedBytesBigEndian.length + addressParamBytes.length);\n\n\ttmp.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n\ttmp.set([addressParamBytes.length], 1);\n\ttmp.set(addressParamBytes, 2);\n\ttmp.set(addressSeedBytesBigEndian, 2 + addressParamBytes.length);\n\n\treturn normalizeSuiAddress(\n\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t);\n}\n"],"mappings":"AAGA,SAASA,OAAA,QAAe;AACxB,SAASC,UAAA,QAAkB;AAE3B,SAASC,wBAAA,QAAgC;AACzC,SAASC,mBAAA,EAAqBC,kBAAA,QAA0B;AACxD,SAASC,gBAAA,QAAwB;AAE1B,SAASC,8BAA8BC,WAAA,EAAqBC,GAAA,EAAa;EAC/E,MAAMC,yBAAA,GAA4BJ,gBAAA,CAAiBE,WAAA,EAAa,EAAE;EAClE,IAAIC,GAAA,KAAQ,uBAAuB;IAClCA,GAAA,GAAM;EACP;EACA,MAAME,iBAAA,GAAoB,IAAIC,WAAA,CAAY,EAAEC,MAAA,CAAOJ,GAAG;EACtD,MAAMK,GAAA,GAAM,IAAIC,UAAA,CAAW,IAAIL,yBAAA,CAA0BM,MAAA,GAASL,iBAAA,CAAkBK,MAAM;EAE1FF,GAAA,CAAIG,GAAA,CAAI,CAACd,wBAAA,CAAyBe,OAAO,CAAC;EAC1CJ,GAAA,CAAIG,GAAA,CAAI,CAACN,iBAAA,CAAkBK,MAAM,GAAG,CAAC;EACrCF,GAAA,CAAIG,GAAA,CAAIN,iBAAA,EAAmB,CAAC;EAC5BG,GAAA,CAAIG,GAAA,CAAIP,yBAAA,EAA2B,IAAIC,iBAAA,CAAkBK,MAAM;EAE/D,OAAOZ,mBAAA,CACNF,UAAA,CAAWD,OAAA,CAAQa,GAAA,EAAK;IAAEK,KAAA,EAAO;EAAG,CAAC,CAAC,EAAEC,KAAA,CAAM,GAAGf,kBAAA,GAAqB,CAAC,CACxE;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}