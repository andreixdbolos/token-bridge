{"ast":null,"code":"import { isSerializedBcs } from \"@mysten/bcs\";\nimport { array, boolean, integer, object, string, union } from \"superstruct\";\nimport { bcs } from \"../bcs/index.js\";\nimport { SuiObjectRef } from \"../types/index.js\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nconst ObjectArg = union([object({\n  ImmOrOwned: SuiObjectRef\n}), object({\n  Shared: object({\n    objectId: string(),\n    initialSharedVersion: union([integer(), string()]),\n    mutable: boolean()\n  })\n}), object({\n  Receiving: SuiObjectRef\n})]);\nconst PureCallArg = object({\n  Pure: array(integer())\n});\nconst ObjectCallArg = object({\n  Object: ObjectArg\n});\nconst BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nfunction Pure(data, type) {\n  return {\n    Pure: Array.from(data instanceof Uint8Array ? data : isSerializedBcs(data) ? data.toBytes() :\n    // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n    bcs.ser(type, data, {\n      maxSize: Infinity\n    }).toBytes())\n  };\n}\nconst Inputs = {\n  Pure,\n  ObjectRef({\n    objectId,\n    digest,\n    version\n  }) {\n    return {\n      Object: {\n        ImmOrOwned: {\n          digest,\n          version,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  },\n  SharedObjectRef({\n    objectId,\n    mutable,\n    initialSharedVersion\n  }) {\n    return {\n      Object: {\n        Shared: {\n          mutable,\n          initialSharedVersion,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  },\n  ReceivingRef({\n    objectId,\n    digest,\n    version\n  }) {\n    return {\n      Object: {\n        Receiving: {\n          digest,\n          version,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  }\n};\nfunction getIdFromCallArg(arg) {\n  if (typeof arg === \"string\") {\n    return normalizeSuiAddress(arg);\n  }\n  if (\"ImmOrOwned\" in arg.Object) {\n    return normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n  }\n  if (\"Receiving\" in arg.Object) {\n    return normalizeSuiAddress(arg.Object.Receiving.objectId);\n  }\n  return normalizeSuiAddress(arg.Object.Shared.objectId);\n}\nfunction getSharedObjectInput(arg) {\n  return typeof arg === \"object\" && \"Object\" in arg && \"Shared\" in arg.Object ? arg.Object.Shared : void 0;\n}\nfunction isSharedObjectInput(arg) {\n  return !!getSharedObjectInput(arg);\n}\nfunction isMutableSharedObjectInput(arg) {\n  return getSharedObjectInput(arg)?.mutable ?? false;\n}\nexport { BuilderCallArg, Inputs, ObjectCallArg, PureCallArg, getIdFromCallArg, getSharedObjectInput, isMutableSharedObjectInput, isSharedObjectInput };","map":{"version":3,"names":["isSerializedBcs","array","boolean","integer","object","string","union","bcs","SuiObjectRef","normalizeSuiAddress","ObjectArg","ImmOrOwned","Shared","objectId","initialSharedVersion","mutable","Receiving","PureCallArg","Pure","ObjectCallArg","Object","BuilderCallArg","data","type","Array","from","Uint8Array","toBytes","ser","maxSize","Infinity","Inputs","ObjectRef","digest","version","SharedObjectRef","ReceivingRef","getIdFromCallArg","arg","getSharedObjectInput","isSharedObjectInput","isMutableSharedObjectInput"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/builder/Inputs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\nimport { isSerializedBcs } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport { array, boolean, integer, object, string, union } from 'superstruct';\n\nimport { bcs } from '../bcs/index.js';\nimport type { SharedObjectRef } from '../bcs/index.js';\nimport { SuiObjectRef } from '../types/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nconst ObjectArg = union([\n\tobject({ ImmOrOwned: SuiObjectRef }),\n\tobject({\n\t\tShared: object({\n\t\t\tobjectId: string(),\n\t\t\tinitialSharedVersion: union([integer(), string()]),\n\t\t\tmutable: boolean(),\n\t\t}),\n\t}),\n\tobject({ Receiving: SuiObjectRef }),\n]);\n\nexport const PureCallArg = object({ Pure: array(integer()) });\nexport const ObjectCallArg = object({ Object: ObjectArg });\nexport type PureCallArg = Infer<typeof PureCallArg>;\nexport type ObjectCallArg = Infer<typeof ObjectCallArg>;\n\nexport const BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nexport type BuilderCallArg = Infer<typeof BuilderCallArg>;\n\nfunction Pure(data: Uint8Array | SerializedBcs<any>, type?: string): PureCallArg;\n/** @deprecated pass SerializedBcs values instead */\nfunction Pure(data: unknown, type?: string): PureCallArg;\nfunction Pure(data: unknown, type?: string): PureCallArg {\n\treturn {\n\t\tPure: Array.from(\n\t\t\tdata instanceof Uint8Array\n\t\t\t\t? data\n\t\t\t\t: isSerializedBcs(data)\n\t\t\t\t? data.toBytes()\n\t\t\t\t: // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n\t\t\t\t  bcs.ser(type!, data, { maxSize: Infinity }).toBytes(),\n\t\t),\n\t};\n}\n\nexport const Inputs = {\n\tPure,\n\tObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tImmOrOwned: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tShared: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tReceivingRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tReceiving: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n\nexport function getIdFromCallArg(arg: string | ObjectCallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\tif ('ImmOrOwned' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n\t}\n\n\tif ('Receiving' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.Receiving.objectId);\n\t}\n\n\treturn normalizeSuiAddress(arg.Object.Shared.objectId);\n}\n\nexport function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined {\n\treturn typeof arg === 'object' && 'Object' in arg && 'Shared' in arg.Object\n\t\t? arg.Object.Shared\n\t\t: undefined;\n}\n\nexport function isSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn !!getSharedObjectInput(arg);\n}\n\nexport function isMutableSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn getSharedObjectInput(arg)?.mutable ?? false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}