{"ast":null,"code":"const ARGUMENT_INNER = \"Argument\";\nconst VECTOR = \"vector\";\nconst OPTION = \"Option\";\nconst CALL_ARG = \"CallArg\";\nconst TYPE_TAG = \"TypeTag\";\nconst OBJECT_ARG = \"ObjectArg\";\nconst PROGRAMMABLE_TX_BLOCK = \"ProgrammableTransaction\";\nconst PROGRAMMABLE_CALL_INNER = \"ProgrammableMoveCall\";\nconst TRANSACTION_INNER = \"Transaction\";\nconst COMPRESSED_SIGNATURE = \"CompressedSignature\";\nconst PUBLIC_KEY = \"PublicKey\";\nconst MULTISIG_PUBLIC_KEY = \"MultiSigPublicKey\";\nconst MULTISIG_PK_MAP = \"MultiSigPkMap\";\nconst MULTISIG = \"MultiSig\";\nconst ENUM_KIND = \"EnumKind\";\nconst TRANSACTION = TRANSACTION_INNER;\nconst ARGUMENT = ARGUMENT_INNER;\nconst PROGRAMMABLE_CALL = \"ProgrammableMoveCall\";\nexport { ARGUMENT, ARGUMENT_INNER, CALL_ARG, COMPRESSED_SIGNATURE, ENUM_KIND, MULTISIG, MULTISIG_PK_MAP, MULTISIG_PUBLIC_KEY, OBJECT_ARG, OPTION, PROGRAMMABLE_CALL, PROGRAMMABLE_CALL_INNER, PROGRAMMABLE_TX_BLOCK, PUBLIC_KEY, TRANSACTION, TRANSACTION_INNER, TYPE_TAG, VECTOR };","map":{"version":3,"names":["ARGUMENT_INNER","VECTOR","OPTION","CALL_ARG","TYPE_TAG","OBJECT_ARG","PROGRAMMABLE_TX_BLOCK","PROGRAMMABLE_CALL_INNER","TRANSACTION_INNER","COMPRESSED_SIGNATURE","PUBLIC_KEY","MULTISIG_PUBLIC_KEY","MULTISIG_PK_MAP","MULTISIG","ENUM_KIND","TRANSACTION","ARGUMENT","PROGRAMMABLE_CALL"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/builder/bcs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypeName } from '@mysten/bcs';\n\nexport const ARGUMENT_INNER = 'Argument';\nexport const VECTOR = 'vector';\nexport const OPTION = 'Option';\nexport const CALL_ARG = 'CallArg';\nexport const TYPE_TAG = 'TypeTag';\nexport const OBJECT_ARG = 'ObjectArg';\nexport const PROGRAMMABLE_TX_BLOCK = 'ProgrammableTransaction';\nexport const PROGRAMMABLE_CALL_INNER = 'ProgrammableMoveCall';\nexport const TRANSACTION_INNER = 'Transaction';\nexport const COMPRESSED_SIGNATURE = 'CompressedSignature';\nexport const PUBLIC_KEY = 'PublicKey';\nexport const MULTISIG_PUBLIC_KEY = 'MultiSigPublicKey';\nexport const MULTISIG_PK_MAP = 'MultiSigPkMap';\nexport const MULTISIG = 'MultiSig';\n\nexport const ENUM_KIND = 'EnumKind';\n\n/** Wrapper around transaction Enum to support `kind` matching in TS */\nexport const TRANSACTION: TypeName = TRANSACTION_INNER;\n/** Wrapper around Argument Enum to support `kind` matching in TS */\nexport const ARGUMENT: TypeName = ARGUMENT_INNER;\n\n/** Custom serializer for decoding package, module, function easier */\nexport const PROGRAMMABLE_CALL = 'ProgrammableMoveCall';\n\n/** Transaction types */\n\nexport type Option<T> = { some: T } | { none: true };\n"],"mappings":"AAKO,MAAMA,cAAA,GAAiB;AACvB,MAAMC,MAAA,GAAS;AACf,MAAMC,MAAA,GAAS;AACf,MAAMC,QAAA,GAAW;AACjB,MAAMC,QAAA,GAAW;AACjB,MAAMC,UAAA,GAAa;AACnB,MAAMC,qBAAA,GAAwB;AAC9B,MAAMC,uBAAA,GAA0B;AAChC,MAAMC,iBAAA,GAAoB;AAC1B,MAAMC,oBAAA,GAAuB;AAC7B,MAAMC,UAAA,GAAa;AACnB,MAAMC,mBAAA,GAAsB;AAC5B,MAAMC,eAAA,GAAkB;AACxB,MAAMC,QAAA,GAAW;AAEjB,MAAMC,SAAA,GAAY;AAGlB,MAAMC,WAAA,GAAwBP,iBAAA;AAE9B,MAAMQ,QAAA,GAAqBhB,cAAA;AAG3B,MAAMiB,iBAAA,GAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}