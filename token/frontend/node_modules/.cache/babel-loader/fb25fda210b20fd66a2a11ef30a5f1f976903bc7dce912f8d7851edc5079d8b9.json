{"ast":null,"code":"class FaucetRateLimitError extends Error {}\nasync function faucetRequest({\n  host,\n  path,\n  body,\n  headers,\n  method\n}) {\n  const endpoint = new URL(path, host).toString();\n  const res = await fetch(endpoint, {\n    method,\n    body: body ? JSON.stringify(body) : void 0,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(headers || {})\n    }\n  });\n  if (res.status === 429) {\n    throw new FaucetRateLimitError(`Too many requests from this client have been sent to the faucet. Please retry later`);\n  }\n  try {\n    const parsed = await res.json();\n    if (parsed.error) {\n      throw new Error(`Faucet returns error: ${parsed.error}`);\n    }\n    return parsed;\n  } catch (e) {\n    throw new Error(`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`);\n  }\n}\nasync function requestSuiFromFaucetV0(input) {\n  return faucetRequest({\n    host: input.host,\n    path: \"/gas\",\n    body: {\n      FixedAmountRequest: {\n        recipient: input.recipient\n      }\n    },\n    headers: input.headers,\n    method: \"POST\"\n  });\n}\nasync function requestSuiFromFaucetV1(input) {\n  return faucetRequest({\n    host: input.host,\n    path: \"/v1/gas\",\n    body: {\n      FixedAmountRequest: {\n        recipient: input.recipient\n      }\n    },\n    headers: input.headers,\n    method: \"POST\"\n  });\n}\nasync function getFaucetRequestStatus(input) {\n  return faucetRequest({\n    host: input.host,\n    path: `/v1/status/${input.taskId}`,\n    headers: input.headers,\n    method: \"GET\"\n  });\n}\nfunction getFaucetHost(network) {\n  switch (network) {\n    case \"testnet\":\n      return \"https://faucet.testnet.sui.io\";\n    case \"devnet\":\n      return \"https://faucet.devnet.sui.io\";\n    case \"localnet\":\n      return \"http://127.0.0.1:9123\";\n    default:\n      throw new Error(`Unknown network: ${network}`);\n  }\n}\nexport { FaucetRateLimitError, getFaucetHost, getFaucetRequestStatus, requestSuiFromFaucetV0, requestSuiFromFaucetV1 };","map":{"version":3,"names":["FaucetRateLimitError","Error","faucetRequest","host","path","body","headers","method","endpoint","URL","toString","res","fetch","JSON","stringify","status","parsed","json","error","e","requestSuiFromFaucetV0","input","FixedAmountRequest","recipient","requestSuiFromFaucetV1","getFaucetRequestStatus","taskId","getFaucetHost","network"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/faucet/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport class FaucetRateLimitError extends Error {}\n\ntype FaucetCoinInfo = {\n\tamount: number;\n\tid: string;\n\ttransferTxDigest: string;\n};\n\ntype FaucetResponse = {\n\ttransferredGasObjects: FaucetCoinInfo[];\n\terror?: string | null;\n};\n\ntype BatchFaucetResponse = {\n\ttask?: string | null;\n\terror?: string | null;\n};\n\ntype BatchSendStatusType = {\n\tstatus: 'INPROGRESS' | 'SUCCEEDED' | 'DISCARDED';\n\ttransferred_gas_objects: { sent: FaucetCoinInfo[] };\n};\n\ntype BatchStatusFaucetResponse = {\n\tstatus: BatchSendStatusType;\n\terror?: string | null;\n};\n\ntype FaucetRequest = {\n\thost: string;\n\tpath: string;\n\tbody?: Record<string, any>;\n\theaders?: HeadersInit;\n\tmethod: 'GET' | 'POST';\n};\n\nasync function faucetRequest({ host, path, body, headers, method }: FaucetRequest) {\n\tconst endpoint = new URL(path, host).toString();\n\tconst res = await fetch(endpoint, {\n\t\tmethod,\n\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(headers || {}),\n\t\t},\n\t});\n\n\tif (res.status === 429) {\n\t\tthrow new FaucetRateLimitError(\n\t\t\t`Too many requests from this client have been sent to the faucet. Please retry later`,\n\t\t);\n\t}\n\n\ttry {\n\t\tconst parsed = await res.json();\n\t\tif (parsed.error) {\n\t\t\tthrow new Error(`Faucet returns error: ${parsed.error}`);\n\t\t}\n\t\treturn parsed;\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n\t\t);\n\t}\n}\n\nexport async function requestSuiFromFaucetV0(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<FaucetResponse> {\n\treturn faucetRequest({\n\t\thost: input.host,\n\t\tpath: '/gas',\n\t\tbody: {\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\theaders: input.headers,\n\t\tmethod: 'POST',\n\t});\n}\n\nexport async function requestSuiFromFaucetV1(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<BatchFaucetResponse> {\n\treturn faucetRequest({\n\t\thost: input.host,\n\t\tpath: '/v1/gas',\n\t\tbody: {\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\theaders: input.headers,\n\t\tmethod: 'POST',\n\t});\n}\n\nexport async function getFaucetRequestStatus(input: {\n\thost: string;\n\ttaskId: string;\n\theaders?: HeadersInit;\n}): Promise<BatchStatusFaucetResponse> {\n\treturn faucetRequest({\n\t\thost: input.host,\n\t\tpath: `/v1/status/${input.taskId}`,\n\t\theaders: input.headers,\n\t\tmethod: 'GET',\n\t});\n}\n\nexport function getFaucetHost(network: 'testnet' | 'devnet' | 'localnet') {\n\tswitch (network) {\n\t\tcase 'testnet':\n\t\t\treturn 'https://faucet.testnet.sui.io';\n\t\tcase 'devnet':\n\t\t\treturn 'https://faucet.devnet.sui.io';\n\t\tcase 'localnet':\n\t\t\treturn 'http://127.0.0.1:9123';\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown network: ${network}`);\n\t}\n}\n"],"mappings":"AAGO,MAAMA,oBAAA,SAA6BC,KAAA,CAAM;AAoChD,eAAeC,cAAc;EAAEC,IAAA;EAAMC,IAAA;EAAMC,IAAA;EAAMC,OAAA;EAASC;AAAO,GAAkB;EAClF,MAAMC,QAAA,GAAW,IAAIC,GAAA,CAAIL,IAAA,EAAMD,IAAI,EAAEO,QAAA,CAAS;EAC9C,MAAMC,GAAA,GAAM,MAAMC,KAAA,CAAMJ,QAAA,EAAU;IACjCD,MAAA;IACAF,IAAA,EAAMA,IAAA,GAAOQ,IAAA,CAAKC,SAAA,CAAUT,IAAI,IAAI;IACpCC,OAAA,EAAS;MACR,gBAAgB;MAChB,IAAIA,OAAA,IAAW,CAAC;IACjB;EACD,CAAC;EAED,IAAIK,GAAA,CAAII,MAAA,KAAW,KAAK;IACvB,MAAM,IAAIf,oBAAA,CACT,qFACD;EACD;EAEA,IAAI;IACH,MAAMgB,MAAA,GAAS,MAAML,GAAA,CAAIM,IAAA,CAAK;IAC9B,IAAID,MAAA,CAAOE,KAAA,EAAO;MACjB,MAAM,IAAIjB,KAAA,CAAM,yBAAyBe,MAAA,CAAOE,KAAA,EAAO;IACxD;IACA,OAAOF,MAAA;EACR,SAASG,CAAA,EAAP;IACD,MAAM,IAAIlB,KAAA,CACT,+DAA+DkB,CAAA,YAAaR,GAAA,CAAII,MAAA,cAAoBJ,GAAA,EACrG;EACD;AACD;AAEA,eAAsBS,uBAAuBC,KAAA,EAIjB;EAC3B,OAAOnB,aAAA,CAAc;IACpBC,IAAA,EAAMkB,KAAA,CAAMlB,IAAA;IACZC,IAAA,EAAM;IACNC,IAAA,EAAM;MACLiB,kBAAA,EAAoB;QACnBC,SAAA,EAAWF,KAAA,CAAME;MAClB;IACD;IACAjB,OAAA,EAASe,KAAA,CAAMf,OAAA;IACfC,MAAA,EAAQ;EACT,CAAC;AACF;AAEA,eAAsBiB,uBAAuBH,KAAA,EAIZ;EAChC,OAAOnB,aAAA,CAAc;IACpBC,IAAA,EAAMkB,KAAA,CAAMlB,IAAA;IACZC,IAAA,EAAM;IACNC,IAAA,EAAM;MACLiB,kBAAA,EAAoB;QACnBC,SAAA,EAAWF,KAAA,CAAME;MAClB;IACD;IACAjB,OAAA,EAASe,KAAA,CAAMf,OAAA;IACfC,MAAA,EAAQ;EACT,CAAC;AACF;AAEA,eAAsBkB,uBAAuBJ,KAAA,EAIN;EACtC,OAAOnB,aAAA,CAAc;IACpBC,IAAA,EAAMkB,KAAA,CAAMlB,IAAA;IACZC,IAAA,EAAM,cAAciB,KAAA,CAAMK,MAAA;IAC1BpB,OAAA,EAASe,KAAA,CAAMf,OAAA;IACfC,MAAA,EAAQ;EACT,CAAC;AACF;AAEO,SAASoB,cAAcC,OAAA,EAA4C;EACzE,QAAQA,OAAA;IACP,KAAK;MACJ,OAAO;IACR,KAAK;MACJ,OAAO;IACR,KAAK;MACJ,OAAO;IACR;MACC,MAAM,IAAI3B,KAAA,CAAM,oBAAoB2B,OAAA,EAAS;EAC/C;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}