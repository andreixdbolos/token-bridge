{"ast":null,"code":"import { fromB64, toB64 } from \"@mysten/bcs\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../cryptography/signature-scheme.js\";\nimport { zkLoginSignature } from \"./bcs.js\";\nfunction getZkLoginSignatureBytes({\n  inputs,\n  maxEpoch,\n  userSignature\n}) {\n  return zkLoginSignature.serialize({\n    inputs,\n    maxEpoch,\n    userSignature: typeof userSignature === \"string\" ? fromB64(userSignature) : userSignature\n  }, {\n    maxSize: 2048\n  }).toBytes();\n}\nfunction getZkLoginSignature({\n  inputs,\n  maxEpoch,\n  userSignature\n}) {\n  const bytes = getZkLoginSignatureBytes({\n    inputs,\n    maxEpoch,\n    userSignature\n  });\n  const signatureBytes = new Uint8Array(bytes.length + 1);\n  signatureBytes.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n  signatureBytes.set(bytes, 1);\n  return toB64(signatureBytes);\n}\nfunction parseZkLoginSignature(signature) {\n  return zkLoginSignature.parse(typeof signature === \"string\" ? fromB64(signature) : signature);\n}\nexport { getZkLoginSignature, parseZkLoginSignature };","map":{"version":3,"names":["fromB64","toB64","SIGNATURE_SCHEME_TO_FLAG","zkLoginSignature","getZkLoginSignatureBytes","inputs","maxEpoch","userSignature","serialize","maxSize","toBytes","getZkLoginSignature","bytes","signatureBytes","Uint8Array","length","set","ZkLogin","parseZkLoginSignature","signature","parse"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/zklogin/signature.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\n\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../cryptography/signature-scheme.js';\nimport type { ZkLoginSignature } from './bcs.js';\nimport { zkLoginSignature } from './bcs.js';\n\ninterface ZkLoginSignatureExtended extends Omit<ZkLoginSignature, 'userSignature'> {\n\tuserSignature: string | ZkLoginSignature['userSignature'];\n}\n\nfunction getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature }: ZkLoginSignatureExtended) {\n\treturn zkLoginSignature\n\t\t.serialize(\n\t\t\t{\n\t\t\t\tinputs,\n\t\t\t\tmaxEpoch,\n\t\t\t\tuserSignature: typeof userSignature === 'string' ? fromB64(userSignature) : userSignature,\n\t\t\t},\n\t\t\t{ maxSize: 2048 },\n\t\t)\n\t\t.toBytes();\n}\n\nexport function getZkLoginSignature({ inputs, maxEpoch, userSignature }: ZkLoginSignatureExtended) {\n\tconst bytes = getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature });\n\tconst signatureBytes = new Uint8Array(bytes.length + 1);\n\tsignatureBytes.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n\tsignatureBytes.set(bytes, 1);\n\treturn toB64(signatureBytes);\n}\n\nexport function parseZkLoginSignature(signature: string | Uint8Array) {\n\treturn zkLoginSignature.parse(typeof signature === 'string' ? fromB64(signature) : signature);\n}\n"],"mappings":"AAGA,SAASA,OAAA,EAASC,KAAA,QAAa;AAE/B,SAASC,wBAAA,QAAgC;AAEzC,SAASC,gBAAA,QAAwB;AAMjC,SAASC,yBAAyB;EAAEC,MAAA;EAAQC,QAAA;EAAUC;AAAc,GAA6B;EAChG,OAAOJ,gBAAA,CACLK,SAAA,CACA;IACCH,MAAA;IACAC,QAAA;IACAC,aAAA,EAAe,OAAOA,aAAA,KAAkB,WAAWP,OAAA,CAAQO,aAAa,IAAIA;EAC7E,GACA;IAAEE,OAAA,EAAS;EAAK,CACjB,EACCC,OAAA,CAAQ;AACX;AAEO,SAASC,oBAAoB;EAAEN,MAAA;EAAQC,QAAA;EAAUC;AAAc,GAA6B;EAClG,MAAMK,KAAA,GAAQR,wBAAA,CAAyB;IAAEC,MAAA;IAAQC,QAAA;IAAUC;EAAc,CAAC;EAC1E,MAAMM,cAAA,GAAiB,IAAIC,UAAA,CAAWF,KAAA,CAAMG,MAAA,GAAS,CAAC;EACtDF,cAAA,CAAeG,GAAA,CAAI,CAACd,wBAAA,CAAyBe,OAAO,CAAC;EACrDJ,cAAA,CAAeG,GAAA,CAAIJ,KAAA,EAAO,CAAC;EAC3B,OAAOX,KAAA,CAAMY,cAAc;AAC5B;AAEO,SAASK,sBAAsBC,SAAA,EAAgC;EACrE,OAAOhB,gBAAA,CAAiBiB,KAAA,CAAM,OAAOD,SAAA,KAAc,WAAWnB,OAAA,CAAQmB,SAAS,IAAIA,SAAS;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}