{"ast":null,"code":"import { fromB64, toB64 } from \"@mysten/bcs\";\nimport { bcs } from \"../bcs/index.js\";\nimport { computeZkLoginAddressFromSeed } from \"../zklogin/address.js\";\nimport { extractClaimValue } from \"../zklogin/jwt-utils.js\";\nimport { parseZkLoginSignature } from \"../zklogin/signature.js\";\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG, SIGNATURE_SCHEME_TO_SIZE } from \"./signature-scheme.js\";\nfunction toSerializedSignature({\n  signature,\n  signatureScheme,\n  publicKey\n}) {\n  if (!publicKey) {\n    throw new Error(\"`publicKey` is required\");\n  }\n  const pubKeyBytes = publicKey.toRawBytes();\n  const serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n  serializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n  serializedSignature.set(signature, 1);\n  serializedSignature.set(pubKeyBytes, 1 + signature.length);\n  return toB64(serializedSignature);\n}\nfunction parseSerializedSignature(serializedSignature) {\n  const bytes = fromB64(serializedSignature);\n  const signatureScheme = SIGNATURE_FLAG_TO_SCHEME[bytes[0]];\n  switch (signatureScheme) {\n    case \"MultiSig\":\n      const multisig = bcs.MultiSig.parse(bytes.slice(1));\n      return {\n        serializedSignature,\n        signatureScheme,\n        multisig,\n        bytes\n      };\n    case \"ZkLogin\":\n      const signatureBytes = bytes.slice(1);\n      const {\n        inputs,\n        maxEpoch,\n        userSignature\n      } = parseZkLoginSignature(signatureBytes);\n      const {\n        issBase64Details,\n        addressSeed\n      } = inputs;\n      const iss = extractClaimValue(issBase64Details, \"iss\");\n      const address = computeZkLoginAddressFromSeed(BigInt(addressSeed), iss);\n      return {\n        serializedSignature,\n        signatureScheme,\n        zkLogin: {\n          inputs,\n          maxEpoch,\n          userSignature,\n          iss,\n          address,\n          addressSeed: BigInt(addressSeed)\n        },\n        signature: bytes\n      };\n    case \"ED25519\":\n    case \"Secp256k1\":\n    case \"Secp256r1\":\n      const size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme];\n      const signature = bytes.slice(1, bytes.length - size);\n      const publicKey = bytes.slice(1 + signature.length);\n      return {\n        serializedSignature,\n        signatureScheme,\n        signature,\n        publicKey,\n        bytes\n      };\n    default:\n      throw new Error(\"Unsupported signature scheme\");\n  }\n}\nexport { parseSerializedSignature, toSerializedSignature };","map":{"version":3,"names":["fromB64","toB64","bcs","computeZkLoginAddressFromSeed","extractClaimValue","parseZkLoginSignature","SIGNATURE_FLAG_TO_SCHEME","SIGNATURE_SCHEME_TO_FLAG","SIGNATURE_SCHEME_TO_SIZE","toSerializedSignature","signature","signatureScheme","publicKey","Error","pubKeyBytes","toRawBytes","serializedSignature","Uint8Array","length","set","parseSerializedSignature","bytes","multisig","MultiSig","parse","slice","signatureBytes","inputs","maxEpoch","userSignature","issBase64Details","addressSeed","iss","address","BigInt","zkLogin","size"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/cryptography/signature.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport { computeZkLoginAddressFromSeed } from '../zklogin/address.js';\nimport { extractClaimValue } from '../zklogin/jwt-utils.js';\nimport { parseZkLoginSignature } from '../zklogin/signature.js';\nimport type { PublicKey } from './publickey.js';\nimport type { SignatureScheme } from './signature-scheme.js';\nimport {\n\tSIGNATURE_FLAG_TO_SCHEME,\n\tSIGNATURE_SCHEME_TO_FLAG,\n\tSIGNATURE_SCHEME_TO_SIZE,\n} from './signature-scheme.js';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** Base64-encoded public key */\n\tpublicKey?: PublicKey;\n};\n\n/**\n * (`flag || signature || pubkey` bytes, as base-64 encoded string).\n * Signature is committed to the intent message of the transaction data, as base-64 encoded string.\n */\nexport type SerializedSignature = string;\n\n/**\n * Takes in a signature, its associated signing scheme and a public key, then serializes this data\n */\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpublicKey,\n}: SerializeSignatureInput): SerializedSignature {\n\tif (!publicKey) {\n\t\tthrow new Error('`publicKey` is required');\n\t}\n\n\tconst pubKeyBytes = publicKey.toRawBytes();\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKeyBytes, 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\n/**\n * Decodes a serialized signature into its constituent components: the signature scheme, the actual signature, and the public key\n */\nexport function parseSerializedSignature(serializedSignature: SerializedSignature) {\n\tconst bytes = fromB64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tswitch (signatureScheme) {\n\t\tcase 'MultiSig':\n\t\t\tconst multisig: MultiSigStruct = bcs.MultiSig.parse(bytes.slice(1));\n\t\t\treturn {\n\t\t\t\tserializedSignature,\n\t\t\t\tsignatureScheme,\n\t\t\t\tmultisig,\n\t\t\t\tbytes,\n\t\t\t};\n\t\tcase 'ZkLogin':\n\t\t\tconst signatureBytes = bytes.slice(1);\n\t\t\tconst { inputs, maxEpoch, userSignature } = parseZkLoginSignature(signatureBytes);\n\t\t\tconst { issBase64Details, addressSeed } = inputs;\n\t\t\tconst iss = extractClaimValue<string>(issBase64Details, 'iss');\n\t\t\tconst address = computeZkLoginAddressFromSeed(BigInt(addressSeed), iss);\n\n\t\t\treturn {\n\t\t\t\tserializedSignature,\n\t\t\t\tsignatureScheme,\n\t\t\t\tzkLogin: {\n\t\t\t\t\tinputs,\n\t\t\t\t\tmaxEpoch,\n\t\t\t\t\tuserSignature,\n\t\t\t\t\tiss,\n\t\t\t\t\taddress,\n\t\t\t\t\taddressSeed: BigInt(addressSeed),\n\t\t\t\t},\n\t\t\t\tsignature: bytes,\n\t\t\t};\n\t\tcase 'ED25519':\n\t\tcase 'Secp256k1':\n\t\tcase 'Secp256r1':\n\t\t\tconst size =\n\t\t\t\tSIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n\t\t\tconst signature = bytes.slice(1, bytes.length - size);\n\t\t\tconst publicKey = bytes.slice(1 + signature.length);\n\n\t\t\treturn {\n\t\t\t\tserializedSignature,\n\t\t\t\tsignatureScheme,\n\t\t\t\tsignature,\n\t\t\t\tpublicKey,\n\t\t\t\tbytes,\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported signature scheme');\n\t}\n}\n"],"mappings":"AAGA,SAASA,OAAA,EAASC,KAAA,QAAa;AAE/B,SAASC,GAAA,QAAW;AAEpB,SAASC,6BAAA,QAAqC;AAC9C,SAASC,iBAAA,QAAyB;AAClC,SAASC,qBAAA,QAA6B;AAGtC,SACCC,wBAAA,EACAC,wBAAA,EACAC,wBAAA,QACM;AAsBA,SAASC,sBAAsB;EACrCC,SAAA;EACAC,eAAA;EACAC;AACD,GAAiD;EAChD,IAAI,CAACA,SAAA,EAAW;IACf,MAAM,IAAIC,KAAA,CAAM,yBAAyB;EAC1C;EAEA,MAAMC,WAAA,GAAcF,SAAA,CAAUG,UAAA,CAAW;EACzC,MAAMC,mBAAA,GAAsB,IAAIC,UAAA,CAAW,IAAIP,SAAA,CAAUQ,MAAA,GAASJ,WAAA,CAAYI,MAAM;EACpFF,mBAAA,CAAoBG,GAAA,CAAI,CAACZ,wBAAA,CAAyBI,eAAe,CAAC,CAAC;EACnEK,mBAAA,CAAoBG,GAAA,CAAIT,SAAA,EAAW,CAAC;EACpCM,mBAAA,CAAoBG,GAAA,CAAIL,WAAA,EAAa,IAAIJ,SAAA,CAAUQ,MAAM;EACzD,OAAOjB,KAAA,CAAMe,mBAAmB;AACjC;AAKO,SAASI,yBAAyBJ,mBAAA,EAA0C;EAClF,MAAMK,KAAA,GAAQrB,OAAA,CAAQgB,mBAAmB;EAEzC,MAAML,eAAA,GACLL,wBAAA,CAAyBe,KAAA,CAAM,CAAC,CAA0C;EAE3E,QAAQV,eAAA;IACP,KAAK;MACJ,MAAMW,QAAA,GAA2BpB,GAAA,CAAIqB,QAAA,CAASC,KAAA,CAAMH,KAAA,CAAMI,KAAA,CAAM,CAAC,CAAC;MAClE,OAAO;QACNT,mBAAA;QACAL,eAAA;QACAW,QAAA;QACAD;MACD;IACD,KAAK;MACJ,MAAMK,cAAA,GAAiBL,KAAA,CAAMI,KAAA,CAAM,CAAC;MACpC,MAAM;QAAEE,MAAA;QAAQC,QAAA;QAAUC;MAAc,IAAIxB,qBAAA,CAAsBqB,cAAc;MAChF,MAAM;QAAEI,gBAAA;QAAkBC;MAAY,IAAIJ,MAAA;MAC1C,MAAMK,GAAA,GAAM5B,iBAAA,CAA0B0B,gBAAA,EAAkB,KAAK;MAC7D,MAAMG,OAAA,GAAU9B,6BAAA,CAA8B+B,MAAA,CAAOH,WAAW,GAAGC,GAAG;MAEtE,OAAO;QACNhB,mBAAA;QACAL,eAAA;QACAwB,OAAA,EAAS;UACRR,MAAA;UACAC,QAAA;UACAC,aAAA;UACAG,GAAA;UACAC,OAAA;UACAF,WAAA,EAAaG,MAAA,CAAOH,WAAW;QAChC;QACArB,SAAA,EAAWW;MACZ;IACD,KAAK;IACL,KAAK;IACL,KAAK;MACJ,MAAMe,IAAA,GACL5B,wBAAA,CAAyBG,eAAwD;MAClF,MAAMD,SAAA,GAAYW,KAAA,CAAMI,KAAA,CAAM,GAAGJ,KAAA,CAAMH,MAAA,GAASkB,IAAI;MACpD,MAAMxB,SAAA,GAAYS,KAAA,CAAMI,KAAA,CAAM,IAAIf,SAAA,CAAUQ,MAAM;MAElD,OAAO;QACNF,mBAAA;QACAL,eAAA;QACAD,SAAA;QACAE,SAAA;QACAS;MACD;IACD;MACC,MAAM,IAAIR,KAAA,CAAM,8BAA8B;EAChD;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}