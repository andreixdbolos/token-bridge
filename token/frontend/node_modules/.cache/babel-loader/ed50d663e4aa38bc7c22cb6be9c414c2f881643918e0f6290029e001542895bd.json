{"ast":null,"code":"import { bcs } from \"../bcs/index.js\";\nfunction createPure(makePure) {\n  function pure(value, type) {\n    return makePure(value, type);\n  }\n  pure.u8 = value => makePure(bcs.U8.serialize(value));\n  pure.u16 = value => makePure(bcs.U16.serialize(value));\n  pure.u32 = value => makePure(bcs.U32.serialize(value));\n  pure.u64 = value => makePure(bcs.U64.serialize(value));\n  pure.u128 = value => makePure(bcs.U128.serialize(value));\n  pure.u256 = value => makePure(bcs.U256.serialize(value));\n  pure.bool = value => makePure(bcs.Bool.serialize(value));\n  pure.string = value => makePure(bcs.String.serialize(value));\n  pure.address = value => makePure(bcs.Address.serialize(value));\n  pure.id = pure.address;\n  return pure;\n}\nexport { createPure };","map":{"version":3,"names":["bcs","createPure","makePure","pure","value","type","u8","U8","serialize","u16","U16","u32","U32","u64","U64","u128","U128","u256","U256","bool","Bool","string","String","address","Address","id"],"sources":["/home/andrei/proiect-itb/token/frontend/node_modules/@mysten/sui.js/src/builder/pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { TransactionBlockInput } from './Transactions.js';\n\nexport function createPure(\n\tmakePure: (value: unknown, type?: string | undefined) => TransactionBlockInput,\n) {\n\t/**\n\t * Add a new non-object input to the transaction.\n\t */\n\tfunction pure(\n\t\t/**\n\t\t * The pure value, serialized to BCS. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: SerializedBcs<any, any> | Uint8Array,\n\t): TransactionBlockInput;\n\t/**\n\t * @deprecated Pass the pure value as SerializedBcs instead.\n\t */\n\tfunction pure(\n\t\t/**\n\t\t * The pure value that will be used as the input value. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: unknown,\n\t\t/**\n\t\t * The BCS type to serialize the value into. If not provided, the type will automatically be determined\n\t\t * based on how the input is used.\n\t\t */\n\t\ttype?: string,\n\t): TransactionBlockInput;\n\n\tfunction pure(value: unknown, type?: string): TransactionBlockInput {\n\t\treturn makePure(value, type);\n\t}\n\n\tpure.u8 = (value: number) => makePure(bcs.U8.serialize(value));\n\tpure.u16 = (value: number) => makePure(bcs.U16.serialize(value));\n\tpure.u32 = (value: number) => makePure(bcs.U32.serialize(value));\n\tpure.u64 = (value: bigint | number | string) => makePure(bcs.U64.serialize(value));\n\tpure.u128 = (value: bigint | number | string) => makePure(bcs.U128.serialize(value));\n\tpure.u256 = (value: bigint | number | string) => makePure(bcs.U256.serialize(value));\n\tpure.bool = (value: boolean) => makePure(bcs.Bool.serialize(value));\n\tpure.string = (value: string) => makePure(bcs.String.serialize(value));\n\tpure.address = (value: string) => makePure(bcs.Address.serialize(value));\n\tpure.id = pure.address;\n\n\treturn pure;\n}\n"],"mappings":"AAKA,SAASA,GAAA,QAAW;AAGb,SAASC,WACfC,QAAA,EACC;EA2BD,SAASC,KAAKC,KAAA,EAAgBC,IAAA,EAAsC;IACnE,OAAOH,QAAA,CAASE,KAAA,EAAOC,IAAI;EAC5B;EAEAF,IAAA,CAAKG,EAAA,GAAMF,KAAA,IAAkBF,QAAA,CAASF,GAAA,CAAIO,EAAA,CAAGC,SAAA,CAAUJ,KAAK,CAAC;EAC7DD,IAAA,CAAKM,GAAA,GAAOL,KAAA,IAAkBF,QAAA,CAASF,GAAA,CAAIU,GAAA,CAAIF,SAAA,CAAUJ,KAAK,CAAC;EAC/DD,IAAA,CAAKQ,GAAA,GAAOP,KAAA,IAAkBF,QAAA,CAASF,GAAA,CAAIY,GAAA,CAAIJ,SAAA,CAAUJ,KAAK,CAAC;EAC/DD,IAAA,CAAKU,GAAA,GAAOT,KAAA,IAAoCF,QAAA,CAASF,GAAA,CAAIc,GAAA,CAAIN,SAAA,CAAUJ,KAAK,CAAC;EACjFD,IAAA,CAAKY,IAAA,GAAQX,KAAA,IAAoCF,QAAA,CAASF,GAAA,CAAIgB,IAAA,CAAKR,SAAA,CAAUJ,KAAK,CAAC;EACnFD,IAAA,CAAKc,IAAA,GAAQb,KAAA,IAAoCF,QAAA,CAASF,GAAA,CAAIkB,IAAA,CAAKV,SAAA,CAAUJ,KAAK,CAAC;EACnFD,IAAA,CAAKgB,IAAA,GAAQf,KAAA,IAAmBF,QAAA,CAASF,GAAA,CAAIoB,IAAA,CAAKZ,SAAA,CAAUJ,KAAK,CAAC;EAClED,IAAA,CAAKkB,MAAA,GAAUjB,KAAA,IAAkBF,QAAA,CAASF,GAAA,CAAIsB,MAAA,CAAOd,SAAA,CAAUJ,KAAK,CAAC;EACrED,IAAA,CAAKoB,OAAA,GAAWnB,KAAA,IAAkBF,QAAA,CAASF,GAAA,CAAIwB,OAAA,CAAQhB,SAAA,CAAUJ,KAAK,CAAC;EACvED,IAAA,CAAKsB,EAAA,GAAKtB,IAAA,CAAKoB,OAAA;EAEf,OAAOpB,IAAA;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}